Console.Clear();
// Вид 1 (Ничего не возвращает и ничего не принимает)

void Method1()                                      // скобочки пустые, они обязательны
{
    Console.WriteLine("Автор Свирикова Екатерина"); // тело метода
}
Method1();                                          // так вызывается метод, скобочки обязательны



// Вид 2 (Ничего не возвращает, но может принимать аргументы)

void Method2(string msg)
{
    Console.WriteLine(msg);                         // в теле метода мы используем принятые аргументы
}
Method2("Текст сообщения");                         // аргумент строка с сообщением

// Method2(msg: "Текст сообщения");  аргументы могут быть именованными
// Это нужно, когда методы принимают какое-то количество аргументов

// например:
void Method21(string msg, int count) // указаны два аргумента
{
    int i = 0;
    while(i < count)
    {
        Console.WriteLine(msg);
        i++;
    }
}
Method21(msg: "Текст", count: 4);          //  вызов метода путем указания аргументов - сообщение и сколько раз показать его

// Method21(count: 4, msg: "Новый текст"); // их не обязательно писать по порядку, это и есть особенность:


// Вид 3 (Что-то возвращает, но ничего не принимает)

int Method3()
{
    return DateTime.Now.Year;
}
int year = Method3();                      // можем использовать идентификатор переменной и присвоить ему нужное значение
Console.WriteLine(year);                   // и использовать эту переменную для вывода значения, кот вернул метод


// Вид 4 (Метод, который что-то принимает и что-то возвращает)

string Method4(int count, string text)     // возвращать будем строку, т.е. какой-то текст мы будем выводить count раз
{
    int i = 0;                             // возьмем цикл
    string result = string.Empty;          // потребуется переменная, куда будем класть результат - пустая строка
    
    while(i < count) 
    {
        result = result + text;            // в result кладем указанный текст
        i++;
    }
    return result;                         // используем классический оператор return с указанием переменной, которую ожидаем получить из метода
}
string res = Method4(10, "z");             // чтобы вызвать метод, нужно создать переменную (res), в нее "положить" напр 10 раз вывести z
Console.WriteLine(res);                    // вывести res, который возвращает данный метод


// еще одна вариация с использованием  for

string Method4(int count, string text)
{
    string result = string.Empty; 
    for(int i = 0; i < count; i++)          // в скобки пишем инициализацию счетчика, проверку условия и инкремент
    {
        result = result + text; 
    }
    return result;
}
string res = Method4(10, "z");
Console.WriteLine(res);


// Использование цикла внутри цикла (вывод таблицы умножения)

for(int i = 2; i <= 10; i++)                        // внешний цикл с счетчиком i
 {
    for(int j = 2; j <= 10; j++)                    //внутренний цикл с счетчиком j
    {
        Console.WriteLine($"{i} * {j} = {i * j}");
    }
    Console.WriteLine();                            // чтобы был переход в виде пустой строки
}
